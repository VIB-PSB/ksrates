import os
import sys
import logging
import datetime
import ksrates.fc_configfile as fcConf
import ksrates.fc_check_input as fcCheck
import ksrates.fc_wgd as fc_wgd
from ksrates.utils import init_logging

def wgd_paralogs(config_file, expert_config_file, n_threads, custom_recret_gfs, parsed_homology_table, test):
    # INPUT
    # Get parameters and FASTA files from configuration file
    config = fcConf.Configuration(config_file, expert_config_file)
    species = config.get_species()
    logging_level = init_logging(f"Paralog wgd analysis for species [{species}]", config.get_logging_level())
    logging.info("Loading parameters and input files")
    preserve = config.get_preserve_ks_tmp_files()

    latin_name = config.get_latin_names()[species]
    max_gene_family_size = config.get_max_gene_family_size()
    paranome = config.get_paranome()
    colinearity = config.get_colinearity()
    reciprocal_retention = config.get_reciprocal_retention()

    top = config.get_reciprocal_retention_top(reciprocal_retention) # Number of top gene families
    rank_type = config.get_reciprocal_retention_rank_type(reciprocal_retention) # Rank type (only "lambda" supported)  
    orthomcl_inflation = config.get_orthomcl_inflation(reciprocal_retention)
    max_extra_original_genes_in_new_gfs = config.get_max_extra_original_genes_in_new_gfs(reciprocal_retention)
    min_common_old_genes_in_new_gfs = 3 # TODO: check its use!
    use_original_orthomcl_version = config.get_orthomcl_version() # Whether to use the original or edited OrthoMCL version (default: edited)

    if not paranome and not colinearity and not reciprocal_retention:
        logging.error('At least one of the "paranome", "collinearity" or "reciprocal retention" parameters in the configuration file needs to be set to "yes".')
        logging.error("Exiting.")
        sys.exit(1)

    logging.info(f"Checking if sequence data files exist and if sequence IDs are compatible with wgd pipeline...")
    # Will exit if FASTA or GFF files are missing or empty or if GFF feature/attribute are missing
    trigger_exit = False

    if colinearity:  # if colinearity analysis is required, load related parameters
        gff = config.get_gff(species)
        if fcCheck.check_file_nonexistent_or_empty(gff, "GFF file"):
            trigger_exit = True

        gff_feature = config.get_feature()
        gff_gene_attribute = config.get_attribute()
        if gff_feature == "":
            logging.error("No GFF attribute provided in configuration file. Will exit.")
            trigger_exit = True
        if gff_gene_attribute == "":
            logging.error("No GFF feature provided in configuration file. Will exit.")
            trigger_exit = True

    # Checking if FASTA file exists and if sequence IDs are compatible with wgd pipeline (paml)
    fasta_names_dict = config.get_fasta_dict()
    species_fasta_file = config.get_fasta_name(fasta_names_dict, species)
    if fcCheck.check_file_nonexistent_or_empty(species_fasta_file, "FASTA file"):  # if missing/empty
        trigger_exit = True
    else: # If FASTA file exists, check for ID compatibility
        if colinearity:
            fcCheck.check_IDs(species_fasta_file, latin_name, gff)
        else:
            fcCheck.check_IDs(species_fasta_file, latin_name)

    if reciprocal_retention and custom_recret_gfs: # If not provided, it's None
        # Check if user-defined path for reciprocally retained GFs exists (MCL-like file)
        trigger_exit = fcCheck.check_file_nonexistent_or_empty(custom_recret_gfs, msg_prefix="User-defined reciprocally retained gene families file")
        # Checking if the MCL-like format is in the correct format
        trigger_exit = fcCheck.check_recret_table_format(custom_recret_gfs)
    if reciprocal_retention and parsed_homology_table != "": # If not provided, it's empty string
        # Check if user-defined path for parsed homology table exists (BPO file generated by previous OrthoMCL run)
        trigger_exit = fcCheck.check_file_nonexistent_or_empty(parsed_homology_table, msg_prefix="User-defined parsed homology table (BPO file)")

    if trigger_exit:
        logging.error("Please add the missing information to the configuration file and rerun the analysis. Exiting.")
        sys.exit(1)
    logging.info("Completed")
    logging.info("")

    # Creating folder for output files of wgd paralog pipeline
    paralog_dists_dir = os.path.join("paralog_distributions", "")
    if not os.path.isdir(paralog_dists_dir):
        logging.info(f"Creating directory [{paralog_dists_dir}]")
        logging.info("")
        os.makedirs(paralog_dists_dir)

    # -----------------------------------------------------------------------------

    # ESTIMATING PARANOME Ks VALUES
    logging.info(datetime.datetime.today().ctime())
    
    if paranome or colinearity:
        # Prerequisite for colinearity pipeline, but not for reciprocally retention pipeline
        logging.info("Running wgd whole-paranome Ks pipeline...")
        fc_wgd.ks_paralogs(species, species_fasta_file, max_gene_family_size=max_gene_family_size, 
                        base_dir=paralog_dists_dir, n_threads=n_threads, logging_level=logging_level,
                        preserve=preserve)
        logging.info(datetime.datetime.today().ctime())
        logging.info("")

    # EXTRACTING ANCHOR PAIRS Ks VALUES for COLINEARITY ANALYSIS
    if colinearity:
        logging.info('---')
        logging.info("Running wgd colinearity Ks pipeline...")

        min_ks_anchors = config.get_min_ks_anchors()
        logging.info(f" - minimum anchor pair Ks value accepted: {min_ks_anchors}")

        fc_wgd.ks_colinearity(species, gff, base_dir=paralog_dists_dir, gff_feature=gff_feature,
                            gff_gene_attribute=gff_gene_attribute, n_threads=n_threads, min_ks_anchors=min_ks_anchors)
        logging.info(datetime.datetime.today().ctime())
        logging.info("")

    # ESTIMATING RECIPROCALLY RETAINED GENE FAMILIES Ks VALUES
    if reciprocal_retention:
        logging.info('---')
        logging.info(f"Running wgd reciprocal retention Ks pipeline...")
        fc_wgd.ks_paralogs_rec_ret(species, species_fasta_file, latin_name, custom_recret_gfs, parsed_homology_table,
                                   top=top, rank_type=rank_type,
                                   orthomcl_inflation=orthomcl_inflation, use_original_orthomcl_version=use_original_orthomcl_version,
                                   max_extra_original_genes_in_new_gfs=max_extra_original_genes_in_new_gfs,
                                   min_common_old_genes_in_new_gfs=min_common_old_genes_in_new_gfs,
                                   base_dir=paralog_dists_dir, 
                                   max_gene_family_size=max_gene_family_size, 
                                   n_threads=n_threads, overwrite=False, preserve=preserve,
                                   is_test_run=test, logging_level=logging_level)
        logging.info(datetime.datetime.today().ctime())
        logging.info("")
        
    logging.info("Done")
