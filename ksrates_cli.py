import click
import logging
from sys import argv
from ksrates._version import __version__

@click.group(context_settings={'help_option_names': ['-h', '--help']})
@click.version_option(__version__, prog_name="ksrates", help="Print version number.")
def cli():
    """
    Welcome to ksrates!
    """


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Generates configuration file.")
@click.argument('filename')
def generate_config(filename):
    """
    Generates the configuration file for the rate-adjustment.
    The configuration file name is given by argument FILENAME.

    \b
    FILENAME: configuration file name
    \b
    Example: ksrates generate-config config_file.txt
    """
    from ksrates.generate_configfile import generate_configfile
    generate_configfile(filename)
    

@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Initializes rate-adjustment.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("-n", "--nextflow", is_flag=True, help="Flag for Nextflow pipeline (Default: False)")
def init(config_file, expert, nextflow):
    """
    Initializes rate-adjustment from CONFIG_FILE.

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example 1: ksrates init config_file.txt
    Example 2: ksrates init config_file.txt --expert path/to/config_expert.txt
    """
    from ksrates.setup_correction import setup_correction
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    setup_correction(config_file, expert, nextflow)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Performs paralog Ks estimation.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("--n-threads", type=int, default=1, help="Number of threads (default: 1)")
@click.option("--custom-recret-gfs", type=click.Path(exists=True), help="User-defined path to MCL-like file containing reciprocally retained GFs (default: paralog_distribution/wgd_species/species_rec_ret_top_2000.mcl.tsv)")
@click.option("--parsed-homology-table", type=click.Path(exists=True), help="User-defined path to parsed homology table ('BPO file') generated by a previous OrthoMCL run")
@click.option("--test", is_flag=True, default=False, help="Flag for test dataset (Default: False)")
def paralogs_ks(config_file, expert, n_threads, custom_recret_gfs, parsed_homology_table, test):
    """
    Performs paralog Ks estimation for the focal species through wgd.

    Takes parameters from CONFIG_FILE. 

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example: ksrates paralogs-ks config_file.txt --n-threads 4
    """
    from ksrates.wgd_paralogs import wgd_paralogs
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if custom_recret_gfs: # If not provided, it's "None"
        click.format_filename(custom_recret_gfs)
    if parsed_homology_table: # If not provided, it's "None"
        click.format_filename(parsed_homology_table)
    else:
        parsed_homology_table = ""        

    wgd_paralogs(config_file, expert, n_threads, custom_recret_gfs, parsed_homology_table, test)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Performs ortholog Ks estimation.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.argument("species1")
@click.argument("species2")
@click.option("--n-threads", type=int, default=1, help="Number of threads (default: 1)")
def orthologs_ks(config_file, expert, species1, species2, n_threads):
    """
    Performs ortholog Ks estimation for SPECIES1 and SPECIES2 through wgd.

    Takes parameters from CONFIG_FILE. 

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    SPECIES1: first of the two species involved in the ortholog Ks estimation
    SPECIES2: second of the two species involved in the ortholog Ks estimation
    \b
    Example: ksrates orthologs-ks config_file.txt species1 species2 --n-threads 4
    """
    from ksrates.wgd_orthologs import wgd_orthologs
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    wgd_orthologs(config_file, expert, species1, species2, n_threads)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, 
             short_help="Computes ortholog divergence times Ks estimates.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option('--ortholog-pairs', type=click.Path(exists=True), help="User-defined path to file containing the ortholog pairs with missing ortholog Ks peak in database (default: rate_adjustment/species/ortholog_pairs_species.tsv)")
def orthologs_analysis(config_file, expert, ortholog_pairs):
    """
    Computes ortholog Ks distribution mode (or median) and updates the ortholog databases.

    Takes parameters from CONFIG_FILE. 

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example: ksrates orthologs-analysis config_file.txt
    """
    from ksrates.compute_peaks import compute_peaks
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if ortholog_pairs:
        click.format_filename(ortholog_pairs)
    compute_peaks(config_file, expert, ortholog_pairs)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, 
             short_help="Performs ortholog substitution rate-adjustment.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("--trios", type=click.Path(exists=True), help="User-defined path to file containing the ortholog trios (default: rate_adjustment/species/orthologs_trios_species.tsv)")
def orthologs_adjustment(config_file, expert, trios):
    """
    Performs substitution rate-adjustment relative to the focal species.

    Takes parameters from CONFIG_FILE. 

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example: ksrates orthologs-adjustment config_file.txt
    """
    from ksrates.correct import correct
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if trios:
        click.format_filename(trios)
    correct(config_file, expert, trios)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Generates rate-adjusted mixed Ks plot.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("--adjustment-table", type=click.Path(exists=True), help="User-defined path to file containing adjustment results (default: rate_adjustment/species/adjustment_table_species.tsv)")
@click.option("--paranome-table", type=click.Path(exists=True), help="User-defined path to file containing paranome Ks (default: paralog_distributions/wgd_species/species.ks.tsv)")
@click.option("--anchors-table", type=click.Path(exists=True), help="User-defined path to file containing anchor pair Ks (default: paralog_distribution/wgd_species/species.ks_anchors.tsv)")
@click.option("--reciprocal-retention-table", type=click.Path(exists=True), help="User-defined path to file containing reciprocally retained paralog Ks (default: paralog_distribution/wgd_species/species.ks_recret_top2000.tsv)")
def plot_paralogs(config_file, expert, adjustment_table, paranome_table, anchors_table, reciprocal_retention_table):
    """
    Plots rate-adjusted mixed paralog-ortholog Ks distribution.
        
    Takes parameters from CONFIG_FILE. 

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example: ksrates plot-paralogs config_file.txt
    """
    from ksrates.plot_paralogs import plot_paralogs_distr
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if adjustment_table:
        click.format_filename(adjustment_table)
    if paranome_table:
        click.format_filename(paranome_table)
    if anchors_table:
        click.format_filename(anchors_table)
    if reciprocal_retention_table:
        click.format_filename(reciprocal_retention_table)
    plot_paralogs_distr(config_file, expert, adjustment_table, paranome_table, anchors_table, reciprocal_retention_table)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Generates phylogram with Ks-unit branch lengths.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("--adjustment-table", type=click.Path(exists=True), help="User-defined path to file containing adjustment results (default: rate_adjustment/species/adjustment_table_species.tsv)")
@click.option("-n", "--nextflow", is_flag=True, help="Flag for Nextflow pipeline (Default: False)")
def plot_tree(config_file, expert, adjustment_table, nextflow):
    """
    Generates a phylogram of the input dataset with branch lengths set to\
    Ks distances estimated from ortholog KS distributions.

    Takes parameters from CONFIG_FILE. 

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example: ksrates plot-tree config_file.txt
    """
    from ksrates.plot_tree import plot_tree_rates
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if adjustment_table:
        click.format_filename(adjustment_table)
    plot_tree_rates(config_file, expert, adjustment_table, nextflow)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Generates ortholog Ks distributions plot.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("--trios", type=click.Path(exists=True), help="User-defined path to file containing the ortholog trios (default: rate_adjustment/species/orthologs_trios_species.tsv)")
def plot_orthologs(config_file, expert, trios):
    """
    Plots ortholog Ks distributions used for rate-adjustment.

    Takes parameters from CONFIG_FILE. 

    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example: ksrates plot-orthologs config_file.txt
    """
    from ksrates.plot_orthologs import plot_orthologs_distr
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if trios:
        click.format_filename(trios)
    plot_orthologs_distr(config_file, expert, trios)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Detects WGD signatures in paralog Ks distribution.")
@click.argument('config_file', type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("--paranome-table", type=click.Path(exists=True), help="User-defined path to file containing paranome Ks (default: paralog_distributions/wgd_species/species.ks.tsv)")
@click.option("--anchors-table", type=click.Path(exists=True), help="User-defined path to file containing anchor pair Ks (default: paralog_distribution/wgd_species/species.ks_anchors.tsv)")
@click.option("--reciprocal-retention-table", type=click.Path(exists=True), help="User-defined path to file containing reciprocally retained paralog Ks (default: paralog_distribution/wgd_species/species.ks_recret_top2000.tsv)")
@click.option("--adjustment-table", type=click.Path(exists=True), help="User-defined path to file containing adjustment results (default: rate_adjustment/species/adjustment_table_species.tsv)")
@click.option("--anchorpoints", type=click.Path(exists=True), help="User-defined path to i-ADHoRe file anchorpoints.txt (default: paralog_distributions/wgd_species/species_i-adhore/anchorpoints.txt)")
@click.option("--multiplicons", type=click.Path(exists=True), help="User-defined path to i-ADHoRe file multiplicons.txt (default: paralog_distributions/wgd_species/species_i-adhore/multiplicons.txt)")
@click.option("--segments", type=click.Path(exists=True), help="User-defined path to i-ADHoRe file segments.txt (default: paralog_distributions/wgd_species/species_i-adhore/segments.txt)")
@click.option("--list-elements", type=click.Path(exists=True), help="User-defined path to i-ADHoRe file list_elements.txt (default: paralog_distributions/wgd_species/species_i-adhore/list_elements.txt)")
@click.option("--multiplicon-pairs", type=click.Path(exists=True), help="User-defined path to i-ADHoRe file multiplicons_pairs.txt (default: paralog_distributions/wgd_species/species_i-adhore/multiplicons_pairs.txt)")
def paralogs_analyses(config_file, expert, paranome_table, anchors_table, reciprocal_retention_table, adjustment_table, anchorpoints, multiplicons, segments, list_elements, multiplicon_pairs):
    """
    Reconstructs potential WGD peaks in the paralog Ks distributions.

    Performs anchor Ks clustering if "collinearity" analysis is switched on, otherwise performs exponential-lognormal mixture model on paranome.
    
    If extra methods are asked through the expert configuration file, performs all methods available for the analysis type(s) selected.

    Takes parameters from CONFIG_FILE. 
    
    \b
    CONFIG_FILE: configuration file to set up the rate-adjustment relative to the focal species
    \b
    Example: ksrates paralogs-analyses config_file.txt
    """
    from ksrates.paralogs_analyses import paralogs_analyses_methods
    click.format_filename(config_file)
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if paranome_table:
        click.format_filename(paranome_table)
    if anchors_table:
        click.format_filename(anchors_table)
    if reciprocal_retention_table:
        click.format_filename(reciprocal_retention_table)
    if adjustment_table:
        click.format_filename(adjustment_table)
    if anchorpoints:
        click.format_filename(anchorpoints)
    if multiplicons:
        click.format_filename(multiplicons)
    if segments:
        click.format_filename(segments)
    if list_elements:
        click.format_filename(list_elements)
    if multiplicon_pairs:
        click.format_filename(multiplicon_pairs)
    paralogs_analyses_methods(config_file, expert, paranome_table, anchors_table, reciprocal_retention_table, 
                    adjustment_table, anchorpoints, multiplicons, segments, list_elements, multiplicon_pairs)


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Performs paralog Ks estimation for all species.")
@click.argument('config_sources', nargs=-1, required=True, type=click.Path(exists=True))
@click.option('-e', '--expert', type=click.Path(exists=True), help="User-defined path to the expert configuration file")
@click.option("--n-threads", type=int, default=1, help="Number of threads (default: 1)")
@click.option("--custom-recret-gfs", type=click.Path(exists=True), help="User-defined path to MCL-like file containing reciprocally retained GFs (default: paralog_distribution/wgd_species/species_rec_ret_top_2000.mcl.tsv)")
@click.option("--test", is_flag=True, default=False, help="Flag for test dataset (Default: False)")
def paralogs_ks_multi(config_sources, expert, n_threads, custom_recret_gfs, test):
    """
    Performs paralog Ks estimation through wgd for all species present in the Newick tree in the configuration file(s) provided as argument.

    Takes parameters from CONFIG_SOURCES.

    \b
    CONFIG_SOURCES: one or more ksrates configuration files and/or directories containing such files
    \b
    Example 1: ksrates paralogs-ks-multi config_file1.txt config_file2.txt 
    Example 2: ksrates paralogs-ks-multi config_file*.txt
    Example 3: ksrates paralogs-ks-multi config_file*.txt config_dir
    """
    import os
    from ksrates.wgd_paralogs import wgd_paralogs
    if expert:
        click.format_filename(expert)
    else:
        expert = ""
    if custom_recret_gfs:
        click.format_filename(custom_recret_gfs)

    # Process any provided source of configuration files (either files or directories containing files)
    for source in config_sources:
        source = os.path.abspath(source)

        # If configuration source is a file, use it directly to launch the command
        if os.path.isfile(source):
            click.format_filename(source)
            wgd_paralogs(source, expert, n_threads, custom_recret_gfs, test)
            print("")

        # Else if configuration source is a directory, loop through the files thereby contained and use them
        elif os.path.isdir(source):
            for config_file in os.listdir(source):
                config_file = os.path.join(source, config_file)
                click.format_filename(config_file)
                wgd_paralogs(config_file, expert, n_threads, custom_recret_gfs, test)
                print("")


@cli.command(context_settings={'help_option_names': ['-h', '--help']}, short_help="Delete all ortholog BLAST tables.")
@click.argument('orthologs_dir_path', type=click.Path(exists=True))
@click.option("--dry-run", is_flag=True, help=("Dry run that only simulates deletion"))
def orthologs_ks_cleanup(orthologs_dir_path, dry_run):
    """
    Deletes all ortholog BLAST tables from an ortholog_distributions directory to free disk space.

    Ortholog BLAST tables ("species1_species2.blast.tsv") easily weight up to 500MB and
    are of little use after that the related ortholog Ks estimates have been estimated ("species1_species2.ks.tsv").
    Therefore, when numerous ortholog pipelines have already been run, the BLAST tables can take up quite some GBs of disk space
    and it might be convenient to delete them in bulk through this command.

    Note the paralog BLAST tables within the paralog_distributions directory are instead meant to be preserved and
    will not be affected by this command.

    Takes parameters from ORTHOLOGS_DIR_PATH.

    \b
    ORTHOLOGS_DIR_PATH: path to the ortholog distribution directory containing the BLAST tables to be deleted
    \b
    Example: ksrates orthologs-ks-cleanup test/ortholog_distribution
    """
    import os
    import glob
    abspath = os.path.abspath(orthologs_dir_path)
    if os.path.basename(abspath) == "paralog_distributions":
        print("This command is meant to be used for ortholog BLAST tables, not for paralog ones.")
        print("Nothing will be deleted. Exiting.")
        return

    blast_list = glob.glob(f"{abspath}/wgd_*/*.blast.tsv")
    if len(blast_list) == 0:
        print("There are no ortholog BLAST tables to be removed")
    else:
        if dry_run:
            print(f'Listing {len(blast_list)} ortholog BLAST tables within "{abspath}":')
            for blast in blast_list:
                print(f"{os.path.basename(blast)}")
            print("Done")

        else:
            print(f'Removing {len(blast_list)} ortholog BLAST tables within "{abspath}":')
            text = input("Confirm deleting (y/N)? ").lower()
            if text == "y" or text == "yes":
                for blast in blast_list:
                    os.remove(blast)
                    print(f"Deleted: {os.path.basename(blast)}")
                print("Done")

            elif text == "n" or text == "no" or text == "":
                print("Cancelled")

            else:
                print('Please choose between "y" or "n". Cancelled.')


# For debugging
# Syntax: python3 ksrates_cli.py [command] [args]
if __name__ == "__main__":
    cli(argv[1:])